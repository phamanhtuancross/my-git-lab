//
//  IssueDetailViewController.swift
//  MyGitLab
//
//  Created by PHAM ANH TUAN on 11/06/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
import RxSwift
import RxCocoa
import RxDataSources

protocol IssueDetailPresenterInterface: PresenterInterface {
    var loadMoreTrigger: PublishRelay<Void> { get }
    var refreshTrigger: PublishRelay<Void> { get }
    var submitDiscussionMessageTrigger: PublishRelay<String> { get }
}


final class IssueDetailViewController: UIViewController, IssueDetailViewInterface {
    
    var presenter: IssueDetailPresenterInterface!
    let issueViewModel = BehaviorRelay<DSIssueViewModel?>(value: nil)
    let discussionsViewModels = BehaviorRelay<[MGLDiscussionViewModel]>(value: [])
    
    // MARK: - Public properties -
    
    @IBOutlet private weak var contentScrollView: UIScrollView!
    @IBOutlet private weak var issueView: DSIssueView!
    @IBOutlet private weak var issuesContainerView: UIView!
    
    @IBOutlet private weak var discussionsHeightConstraint: NSLayoutConstraint!
    @IBOutlet private weak var issueCommentsContainerView: UIView!
    @IBOutlet private weak var issueDiscussionTableView: UITableView!
    @IBOutlet private weak var commentBoxContainerView: UIView!
    @IBOutlet private weak var chatBoxView: MGLissueDiscussionBoxView!
    
    @IBOutlet private weak var chatboxBottomConstraint: NSLayoutConstraint!
    private var refreshControl = UIRefreshControl()
    
    private let viewDidLoadRelay = BehaviorRelay<Bool>(value: false)
    private lazy var dataSource = makeDataSource()
    
    // MARK: - Private properties -
    
    private let disposeBag = DisposeBag()
    
    // MARK: - Lifecycle -
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        defer {
            viewDidLoadRelay.accept(true)
        }
        
        configureViews()
        configurePresenter()
        
        restorationIdentifier = "IssueDetailViewController"
    }
    
}

extension IssueDetailViewController {
    private func configureViews() {
        configureRefreshControl()
        configureIssueView()
        configureTableView()
        configureCommentBoxView()
    }
    
    private func configureCommentBoxView() {
        commentBoxContainerView.setShadowStyle(.shadow4Revert)
        
        chatBoxView.didChangeKeyboardHeight = { [weak chatboxBottomConstraint] keyboardHeight in
            chatboxBottomConstraint?.constant = keyboardHeight
        }
        
        chatBoxView.didSubmitDiscussMessage = { [weak presenter] discussionMessage in
            presenter?.submitDiscussionMessageTrigger.accept(discussionMessage)
        }
    }
    
    private func configureIssueView() {
        issueView.layer.masksToBounds = true
        issueView.layer.cornerRadius = 8.0
        
        issuesContainerView.setShadowStyle(.shadow8)
        
        issueView.setStyle(.detail)
    }
    
    private func configureRefreshControl() {
        refreshControl.tintColor = Colors.ink400
        refreshControl.attributedTitle = NSAttributedString(string: "Issue Detail Are Loading .......",
                                                            attributes: [ NSAttributedString.Key.foregroundColor: Colors.ink400s])
        refreshControl.addTarget(self, action: #selector(refresh(sender:)), for: UIControl.Event.valueChanged)
        contentScrollView.addSubview(refreshControl)
    }
    
    @objc func refresh(sender:AnyObject) {
        presenter.refreshTrigger.accept(())
        refreshControl.endRefreshing()
    }
    private func configureTableView() {
        registerTableCells()
        
        issueDiscussionTableView.layer.masksToBounds = true
        issueDiscussionTableView.layer.cornerRadius = 8.0
        issueCommentsContainerView.setShadowStyle(.shadow8)
        
        issueDiscussionTableView.rx.setDelegate(self).disposed(by: disposeBag)
        
        issueDiscussionTableView
            .rx
            .observe(CGSize.self, #keyPath(UIScrollView.contentSize))
            .filterNil()
            .map { $0.height }
            .subscribeNext { [weak discussionsHeightConstraint] height in
                discussionsHeightConstraint?.constant = height
            }
            .disposed(by: disposeBag)
        
        contentScrollView
            .rx
            .loadMoreTrigger
            .bind(to: presenter.loadMoreTrigger)
            .disposed(by: disposeBag)
    }
    
    private func registerTableCells() {
        issueDiscussionTableView.register(cellType: MGLDiscussionCell.self)
        issueDiscussionTableView.register(headerFooterViewType: MGLDiscussionHeaderView.self)
    }
}

extension IssueDetailViewController {
    private func configurePresenter() {
        
        let didLoad = viewDidLoadRelay.asObservable()
        
        issueViewModel
            .filterNil()
            .takeLatestWhen(didLoad)
            .asDriver(onErrorDriveWith: .never())
            .driveNext { [weak self] viewModel in
                self?.issueView.configureView(viewModel: viewModel)
            }
            .disposed(by: disposeBag)
        
        discussionsViewModels
            .filterEmpty()
            .takeLatestWhen(didLoad)
            .map { [Section(model: .zero, items: $0)] }
            .asDriver(onErrorDriveWith: .never())
            .drive(issueDiscussionTableView.rx.items(dataSource: dataSource))
            .disposed(by: disposeBag)
    }
}

extension IssueDetailViewController {
    typealias Section = AnimatableSectionModel<Int, MGLDiscussionViewModel>
    typealias DataSource = RxTableViewSectionedAnimatedDataSource<Section>
}

extension IssueDetailViewController {
    private func makeDataSource() -> DataSource {
        return .init(
            animationConfiguration: AnimationConfiguration(insertAnimation: .left, reloadAnimation: .left, deleteAnimation: .fade),
            configureCell: { _, tableView, indexPath, viewModel in
                let cell:  MGLDiscussionCell = tableView.dequeueReusableCell(for: indexPath)
                cell.configureCell(viewModel: viewModel)
                return cell
            }
        )
    }
}

extension IssueDetailViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let headerView = tableView.dequeueReusableHeaderFooterView(MGLDiscussionHeaderView.self)
        return headerView
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 56.0
    }
}

extension IssueDetailViewController {
    override func encodeRestorableState(with coder: NSCoder) {
        super.encodeRestorableState(with: coder)
        coder.encode("Issues_list", forKey: "IssueDetailViewController")
    }
    
    override func decodeRestorableState(with coder: NSCoder) {
        super.decodeRestorableState(with: coder)
        print(coder)
    }
}

