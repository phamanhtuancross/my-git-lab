//
//  IssueDetailPresenter.swift
//  MyGitLab
//
//  Created by PHAM ANH TUAN on 11/06/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import Foundation
import RxSwift
import RxCocoa
import Action

protocol IssueDetailWireframeInterface: WireframeInterface {}

protocol IssueDetailViewInterface: ViewInterface {
    var issueViewModel: BehaviorRelay<DSIssueViewModel?> { get }
    var discussionsViewModels: BehaviorRelay<[MGLDiscussionViewModel]> { get }
}

final class IssueDetailPresenter: IssueDetailPresenterInterface {
    
    let loadMoreTrigger = PublishRelay<Void>()
    let refreshTrigger = PublishRelay<Void>()
    let submitDiscussionMessageTrigger = PublishRelay<String>()
    // MARK: - Private properties -
    
    private lazy var fetchDiscussionsAction = makeFetchDiscusionsAction()
    private lazy var addDicussionAction = makeAddDicussionToThreadAction()
    private lazy var fetchFireStoreDiscussionsAction = makeFetchFireStoreDiscussionAction()
    private lazy var listenFireStoreDiscussionChangedAction = makeListenFireStoreDiscussionChangedAction()
    
    private let disposeBag = DisposeBag()
    private var currentPageInfo = MGLPageInfo(hasNextPage: true, startCursor: "", endCursor: "", hasPreviousPage: false)
    
    private let gitlabDiscussionsRelay = BehaviorRelay<[MGLDiscussionViewModel]>(value: [])
    private let firestoreDiscussionsRelay = BehaviorRelay<[MGLDiscussionViewModel]>(value: [])
    
    private unowned let view: IssueDetailViewInterface
    private let interactor: IssueDetailInteractorInterface
    private let wireframe: IssueDetailWireframeInterface
    private let issue: MGLIssue
    
    
    // MARK: - Lifecycle -
    
    init(
        view: IssueDetailViewInterface,
        interactor: IssueDetailInteractorInterface,
        wireframe: IssueDetailWireframeInterface,
        issue: MGLIssue
    ) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
        self.issue = issue
        
        configurePresenter()
        configureViewActions()
    }
}

extension IssueDetailPresenter {
    private func configurePresenter() {
        view.issueViewModel.accept(DSIssueViewModel(model: issue))
        
        Observable
            .combineLatest(
                firestoreDiscussionsRelay,
                gitlabDiscussionsRelay
            ) { $0 + $1 }
            .map { $0.sorted(by: { first, second in
                guard let firstDate = first.model.createdAt.toDate(), let secondDate = second.model.createdAt.toDate() else { return true }
                return firstDate < secondDate
            })}
            .bind(to: view.discussionsViewModels)
            .disposed(by: disposeBag)
        
        fetchDiscussionsAction
            .elements
            .map { $0.discussions }
            .map {  $0.map { MGLDiscussionViewModel(model: $0) } }
            .map { [weak self] newViewModels in
                guard (self?.currentPageInfo.hasPreviousPage).or(false),
                      let currentViewModels = self?.gitlabDiscussionsRelay.value
                else {
                    return newViewModels
                }
                
                return currentViewModels + newViewModels
            }
            .bind(to: gitlabDiscussionsRelay)
            .disposed(by: disposeBag)
        
        fetchDiscussionsAction
            .elements
            .map { $0.pageInfo }
            .subscribeNext { [weak self] pageInfo in
                self?.currentPageInfo = pageInfo
            }
            .disposed(by: disposeBag)
        
        addDicussionAction
            .elements
            .subscribeNext { result in
                print("add dicussion succesion :\(result)")
            }
            .disposed(by: disposeBag)
        
        addDicussionAction
            .underlyingError
            .subscribeNext { error in
                debugPrint("Add dicussion error: \(error)")
            }
            .disposed(by: disposeBag)
//
//        fetchFireStoreDiscussionsAction
//            .elements
//            .subscribeNext { dicussions in
//                print("dissucssion : \(dicussions)")
//            }
//            .disposed(by: disposeBag)
        
        listenFireStoreDiscussionChangedAction
            .elements
            .map { $0.map { MGLDiscussionViewModel(model: $0) } }
            .bind(to: firestoreDiscussionsRelay)
            .disposed(by: disposeBag)
        
//        fetchFireStoreDiscussionsAction.execute()
        listenFireStoreDiscussionChangedAction.execute()
        
        fetchDiscussionsAction.execute(currentPageInfo.endCursor)
    }
}

extension IssueDetailPresenter {
    private func configureViewActions() {
        loadMoreTrigger
            .map { [weak self] in self?.currentPageInfo }
            .filterNil()
            .filter { $0.hasNextPage }
            .map { $0.endCursor }
            .subscribeNext { [weak fetchDiscussionsAction] after in
                fetchDiscussionsAction?.execute(after)
            }
            .disposed(by: disposeBag)
        
        refreshTrigger
            .subscribeNext { [weak self] in
                guard let self = self else { return }
                self.resetData()
                self.fetchDiscussionsAction.execute(self.currentPageInfo.endCursor)
            }
            .disposed(by: disposeBag)
        
        submitDiscussionMessageTrigger
            .subscribeNext { [weak self] message in
                self?.addDicussionAction.execute(message)
            }
            .disposed(by: disposeBag)
    }
    
    func resetData() {
        currentPageInfo = .init(hasNextPage: true, startCursor: "", endCursor: "", hasPreviousPage: false)
    }
}

// MARK: - Extensions -
extension IssueDetailPresenter {
    func makeFetchDiscusionsAction() -> Action<String, MGLIssueDiscussionsPagination> {
        return Action<String, MGLIssueDiscussionsPagination> { [weak self] after in
            guard let self = self else { return .empty() }
            return self.interactor.fetchDiscussions(after: after)
        }
    }
    
    func makeAddDicussionToThreadAction() -> Action<String, Bool> {
        return Action<String, Bool> { [weak self] dicussionContent in
            guard let self = self else { return .empty() }
            return self.interactor.addDiscussionToFirebase(dicussionContent)
        }
    }
    
    func makeFetchFireStoreDiscussionAction() -> Action<Void, [MGLIssueDiscussion]> {
        return Action<Void, [MGLIssueDiscussion]> { [weak self] in
            guard let self = self else { return .empty() }
            return self.interactor.fetchFireStoreDicussions()
        }
    }
    
    func makeListenFireStoreDiscussionChangedAction() -> Action<Void, [MGLIssueDiscussion]> {
        return Action<Void, [MGLIssueDiscussion]> { [weak self] in
            guard let self = self else { return .empty() }
            return self.interactor.listenOnFirestoreDicussionsChange()
        }
    }
}
