//
//  IssueListViewController.swift
//  MyGitLab
//
//  Created by PHAM ANH TUAN on 11/06/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
import RxSwift
import RxCocoa
import RxDataSources
import ProgressHUD

protocol IssueListPresenterInterface: PresenterInterface {
    var selectedIssue: PublishRelay<MGLIssue> { get }
    var loadMoreTrigger: PublishRelay<Void> { get }
    var refreshTrigger: PublishRelay<Void> { get }
    var didChangeTableContentOffsetY: PublishRelay<CGFloat> { get }
}


final class IssueListViewController: UIViewController, IssueListViewInterface {
    
    // MARK: - Public properties -
    
    var presenter: IssueListPresenterInterface!
    let  viewModels = BehaviorRelay<[DSIssueViewModel]>(value: [])
    let tableViewContentOffsetY = BehaviorRelay<CGFloat?>(value: nil)
    
    // MARK: - Private properties -
    @IBOutlet private weak var tableView: UITableView!
    
    private var refreshControl = UIRefreshControl()
    
    private let disposeBag = DisposeBag()
    private lazy var dataSource = makeDataSource()
    private let viewDidLoadRelay = BehaviorRelay(value: false)
    
    // MARK: - Lifecycle -
    
    override func viewDidLoad() {
        super.viewDidLoad()
        defer { viewDidLoadRelay.accept(true) }
        
        configureViews()
        configurePresenter()
        
        restorationIdentifier = "IssueListViewController"
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        navigationItem.title = "GitLab"
    }
}

// MARK: - Extensions -

extension IssueListViewController {
    private func configureViews() {
        configureTableView()
    }
    
    private func configureRefreshControl() {
        refreshControl.tintColor = Colors.ink400
        refreshControl.attributedTitle = NSAttributedString(string: "Issue List Are Loading .......",
                                                            attributes: [ NSAttributedString.Key.foregroundColor: Colors.ink400s])
        refreshControl.addTarget(self, action: #selector(refresh(sender:)), for: UIControl.Event.valueChanged)
        tableView.refreshControl = refreshControl
    }
    
    @objc func refresh(sender:AnyObject) {
        presenter.refreshTrigger.accept(())
        refreshControl.endRefreshing()
    }
    
    private func configureTableView() {
        registerTableViewCells()
        
        tableView.backgroundColor = UIColor.systemGroupedBackground
        tableView.contentInset = .init(top: 16, left: 0, bottom: 0, right: 0)
        
        tableView
            .rx
            .modelSelected(DSIssueViewModel.self)
            .map { $0.model }
            .bind(to: presenter.selectedIssue)
            .disposed(by: disposeBag)
        
        tableView
            .rx
            .loadMoreTrigger
            .bind(to: presenter.loadMoreTrigger)
            .disposed(by: disposeBag)
        
        tableView
            .rx
            .contentOffset
            .map { $0.y }
            .subscribeNext { [weak presenter] yOffset in
                presenter?.didChangeTableContentOffsetY.accept(yOffset)
            }
            .disposed(by: disposeBag)
    }
    
    private func registerTableViewCells() {
        tableView.register(cellType: DSIssueTableViewCell.self)
    }
}

extension IssueListViewController {
    private func configurePresenter() {
        
        let didLoad = viewDidLoadRelay.asObservable()
        
        viewModels
            .filterEmpty()
            .map {
                [Section(model: .zero, items: $0)]
            }
            .takeLatestWhen(didLoad)
            .asDriver(onErrorDriveWith: .never())
            .drive(tableView.rx.items(dataSource: dataSource))
            .disposed(by: disposeBag)
        
        tableViewContentOffsetY
            .filterNil()
            .takeLatestWhen(didLoad)
            .subscribeNext { [weak self] yOffset in
                
                guard let tableView = self?.tableView else { return }
                let contentOffset =  CGPoint(x: .zero, y: yOffset)
                
                tableView.setContentOffset(contentOffset, animated: false)
            }
            .disposed(by: disposeBag)
    }
}

extension IssueListViewController {
    typealias Section = AnimatableSectionModel<Int, DSIssueViewModel>
    typealias DataSource = RxTableViewSectionedAnimatedDataSource<Section>
}

extension IssueListViewController {
    private func makeDataSource() -> DataSource {
        
        let configureCell: DataSource.ConfigureCell = { _, tableView, IndexPath, viewModel  -> UITableViewCell in
            let cell: DSIssueTableViewCell = tableView.dequeueReusableCell(for: IndexPath)
            cell.configureCell(viewModel: viewModel)
            return cell
        }
        
        let animationConfiguration = AnimationConfiguration(insertAnimation: .left,
                                                            reloadAnimation: .fade,
                                                            deleteAnimation: .right)
        
        return .init(
            animationConfiguration: animationConfiguration,
            configureCell: configureCell
        )
    }
}

extension IssueListViewController: DSStatePresentable {
    
    func startLoading() {
        /// Show skeleton herre
        ProgressHUD.show()
    }
    
    func endLoading(error: Error?) {
        ProgressHUD.dismiss()
        
        /// Show alert
        guard let error = error else { return }
        let alertViewController = UIAlertController(title: "Error", message: error.localizedDescription, preferredStyle: .alert)
        let cancelAction = UIAlertAction(title: "Cancel", style: .destructive, handler: nil)
        
        alertViewController.addAction(cancelAction)
        
        present(alertViewController, animated: true, completion: nil)
    }
}
